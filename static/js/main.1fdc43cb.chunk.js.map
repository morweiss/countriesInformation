{"version":3,"sources":["components/Header.js","components/SearchForm.js","components/CountryInfoContainer.js","utils/localStorageHandlerFunctions.js","utils/const.js","components/SearchContainer.js","components/App.js","index.js"],"names":["Header","AppBar","position","Toolbar","style","backgroundColor","color","Typography","variant","fontFamily","fontWeight","margin","SearchForm","props","this","selectedCountry","requestedInfo","getInformation","countries","informationTypeList","icon","fontSize","checkedIcon","Container","textAlign","borderBottom","Box","my","Autocomplete","options","getOptionLabel","option","name","onChange","event","newValue","width","marginLeft","marginRight","renderInput","params","TextField","label","required","multiple","id","selected","Fragment","Checkbox","checked","Button","onClick","getInfoClicked","Component","CountryInfoContainer","requiredInformation","selectedCountryInfo","Object","values","map","info","src","localStorageHandlerFunctions","initCountrInformationOnLocalstorage","countryList","countriesInformation","forEach","country","localStorage","setItem","JSON","stringify","getCountriesList","countriesList","parse","getItem","axios","get","countriesListResponse","data","getMissingInfoFromAPI","countryName","missingInfoForCountry","countriesObjFromLocalStorage","missingInfoArray","fieldsUrl","element","res","information","Array","isArray","convertResToString","infoArray","stringInformation","i","length","getInformationAboutCountry","infoTypeList","requiredInfo","countryInfo","undefined","push","informationConstants","SearchContainer","a","setState","countriesNamesList","state","App","Grid","container","direction","justify","alignItems","ReactDom","render","document","querySelector"],"mappings":"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","file":"static/js/main.1fdc43cb.chunk.js","sourcesContent":["import React from 'react';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <AppBar position=\"static\" >\r\n          <Toolbar style ={{backgroundColor : \"black\" , color: \"white\"}}>\r\n            <Typography variant=\"h4\" style ={{fontFamily: \"fantasy\",fontWeight:300}}>Search & Find</Typography>\r\n            <Typography variant=\"h6\" style={{margin: \"10px 0px 0px 10px\", fontFamily: \"cursive\"}}> Countries</Typography>\r\n          </Toolbar>\r\n        </AppBar>\r\n        \r\n    );\r\n};\r\n\r\nexport default Header;","import React, {Component} from 'react';\r\nimport Container from '@material-ui/core/Container';\r\nimport Box from '@material-ui/core/Box';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\r\nimport CheckBoxIcon from '@material-ui/icons/CheckBox';\r\n\r\n\r\nclass SearchForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        let selectedCountry, requestedInfo;\r\n    }\r\n\r\n    getInfoClicked(){\r\n        if(this.selectedCountry && this.requestedInfo){\r\n            this.props.getInformation(this.selectedCountry, this.requestedInfo);\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const {countries , informationTypeList} = this.props;\r\n        const icon = <CheckBoxOutlineBlankIcon fontSize=\"small\" />;\r\n        const checkedIcon = <CheckBoxIcon fontSize=\"small\" />;\r\n\r\n        return(\r\n            <Container style={{textAlign : \"center\", borderBottom: \"1px solid\"}}>\r\n                <Box my={4}>\r\n                    <Typography variant=\"h4\" style ={{fontFamily: \"cursive\",fontWeight:200}} > What do you want to know? </Typography>\r\n                </Box>\r\n                <Box my={2}>\r\n                    <Autocomplete\r\n                        options={countries}\r\n                        getOptionLabel={(option) => option.name}\r\n                        onChange={(event, newValue) => {\r\n                            this.selectedCountry = newValue.name;\r\n                          }}\r\n                        style={{ width: \"70%\", marginLeft: \"auto\", marginRight: \"auto\"}}\r\n                        renderInput={(params) => <TextField {...params} label=\" Choose the country\" required margin=\"normal\" />}\r\n                    />\r\n                </Box>\r\n                <Box my={2}>\r\n                    <Autocomplete\r\n                        multiple\r\n                        id=\"checkboxes-tags-demo\"\r\n                        options={informationTypeList}\r\n                        id=\"tags-standard\"\r\n                        getOptionLabel={(option) => option}\r\n                        onChange={(event, newValue) => {\r\n                            this.requestedInfo = newValue;\r\n                          }}\r\n                        renderOption={(option, { selected }) => (\r\n                            <React.Fragment>\r\n                            <Checkbox\r\n                                icon={icon}\r\n                                checkedIcon={checkedIcon}\r\n                                style={{ marginRight: 8 }}\r\n                                checked={selected}\r\n                            />\r\n                            {option}\r\n                            </React.Fragment>\r\n                        )}\r\n                        style={{ width: \"70%\", marginLeft: \"auto\", marginRight: \"auto\"}}\r\n                        renderInput={(params) => (\r\n                            <TextField {...params} variant=\"standard\" required label=\"What do you want to know?\"  />\r\n                        )}\r\n                    />\r\n                </Box>\r\n                <Box my={4}>\r\n                    <Button variant=\"contained\" style ={{backgroundColor : \"black\" , color: \"white\"}} onClick={() =>{ this.getInfoClicked()}}>\r\n                        GO!\r\n                    </Button>\r\n                </Box>\r\n            </Container>\r\n        );\r\n    }\r\n};\r\n\r\nexport default SearchForm;","import Container from '@material-ui/core/Container';\r\nimport Box from '@material-ui/core/Box';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst CountryInfoContainer = (props) => {\r\nconst {selectedCountry , requiredInformation , selectedCountryInfo} = props;\r\n    return (\r\n        <Container style={{textAlign : \"center\"}}>\r\n                <Box my={4}>\r\n                    <Typography variant=\"h2\" > {selectedCountry} </Typography>\r\n                </Box>\r\n                    {Object.values(requiredInformation).map((info) => {\r\n                        return  <Box my={2}>\r\n                                    <Typography variant=\"h5\" color=\"primary\" key={info+selectedCountry}>{info} </Typography>\r\n                                    {info !== 'flag' ? <Typography variant=\"h5\" > {selectedCountryInfo[info]+selectedCountry} </Typography> : <img src={props.selectedCountryInfo[info]} width=\"20%\"/>}\r\n                                </Box>  \r\n                    })}                                      \r\n        </Container>\r\n        \r\n    );\r\n};\r\n\r\nexport default CountryInfoContainer;","import axios from 'axios';\r\n\r\nconst localStorageHandlerFunctions = {\r\n\r\n    initCountrInformationOnLocalstorage(countryList) {\r\n       let countriesInformation = {};\r\n       countryList.forEach(country => {\r\n            countriesInformation[country.name] = {};\r\n       });\r\n       localStorage.setItem('countriesInformation', JSON.stringify(countriesInformation));\r\n    },\r\n\r\n    async getCountriesList() {\r\n        let countriesList = JSON.parse(localStorage.getItem('countriesList'));\r\n        if (countriesList === \"undefined\" || countriesList === null) {\r\n            const countriesListResponse = await axios.get('https://restcountries.eu/rest/v2/all?fields=name;');\r\n            countriesList = countriesListResponse.data;\r\n            localStorage.setItem('countriesList', JSON.stringify(countriesList));\r\n            \r\n            //init country info array base on country list\r\n            this.initCountrInformationOnLocalstorage(countriesList);\r\n        }\r\n\r\n        return countriesList;\r\n    },\r\n\r\n    async getMissingInfoFromAPI(countryName, missingInfoForCountry){\r\n        let countriesObjFromLocalStorage = JSON.parse(localStorage.getItem('countriesInformation'));\r\n        let missingInfoArray = [];\r\n        let fieldsUrl = ''\r\n             missingInfoForCountry.forEach(element => {\r\n                fieldsUrl = fieldsUrl + element + ';';\r\n            });\r\n            \r\n            const res = await axios.get('https://restcountries.eu/rest/v2/name/'+countryName+'?fields='+fieldsUrl);\r\n            missingInfoForCountry.forEach(element => {\r\n                let information = res.data[0][element];\r\n                if(Array.isArray(information)){\r\n                    information = this.convertResToString(information);\r\n                }\r\n                countriesObjFromLocalStorage[countryName][element] = information;\r\n            });\r\n            \r\n\r\n            localStorage.setItem('countriesInformation', JSON.stringify(countriesObjFromLocalStorage));\r\n            return missingInfoArray;\r\n        \r\n    },\r\n\r\n    convertResToString(infoArray){\r\n        let stringInformation = '';\r\n        for (let i = 0; i < infoArray.length ; i++){\r\n            if(infoArray[i].name){\r\n                stringInformation =  infoArray[i].name + ' ' + stringInformation;\r\n            } else {\r\n                stringInformation =  infoArray[i] + ' ' + stringInformation;\r\n            }\r\n        }\r\n\r\n        \r\n        return stringInformation;\r\n    },\r\n\r\n    async getInformationAboutCountry(countryName, infoTypeList){\r\n        let countriesObjFromLocalStorage = JSON.parse(localStorage.getItem('countriesInformation'));\r\n        let missingInfoForCountry = [];\r\n        let requiredInfo = [];\r\n        let countryInfo = countriesObjFromLocalStorage[countryName];\r\n            infoTypeList.forEach(element => {\r\n                if(countryInfo[element] === undefined || countryInfo[element] === null){\r\n                    missingInfoForCountry.push(element);\r\n                }\r\n                else{\r\n                    requiredInfo.push(countryInfo[element]);\r\n                }\r\n            });\r\n\r\n        if(missingInfoForCountry.length > 0){\r\n            await this.getMissingInfoFromAPI(countryName,missingInfoForCountry);\r\n        }\r\n\r\n        countriesObjFromLocalStorage = JSON.parse(localStorage.getItem('countriesInformation'));\r\n        countryInfo = countriesObjFromLocalStorage[countryName];\r\n        \r\n        return countryInfo;\r\n    }\r\n}\r\n\r\nexport default localStorageHandlerFunctions;\r\n","const informationConstants = {\r\n    informationTypeList : ['currencies', 'languages', 'capital', 'callingCodes', 'region', 'subregion', 'population', 'timezones', 'borders', 'flag'],\r\n}\r\n\r\nexport default informationConstants;","import React, {Component} from 'react';\r\nimport Container from '@material-ui/core/Container';\r\nimport SearchForm from './SearchForm';\r\nimport CountryInfoContainer from './CountryInfoContainer';\r\nimport localStorageHandlerFunctions from '../utils/localStorageHandlerFunctions';\r\nimport informationConstants from '../utils/const';\r\n\r\n\r\nclass SearchContainer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          selectedCountryInfo : [],\r\n          selectedCountry : '',\r\n          countriesNamesList : [],\r\n          requiredInformation : [],\r\n          informationTypeList: informationConstants.informationTypeList\r\n        };\r\n    }\r\n    componentDidMount(){\r\n        this.getCountriesList();\r\n    }\r\n\r\n    getCountriesList = async ()  => {\r\n        const countriesList = await localStorageHandlerFunctions.getCountriesList();\r\n        this.setState({\r\n            countriesNamesList: countriesList\r\n        })\r\n    };\r\n\r\n    getInformation = async (countryName, requiredInformation) => {\r\n        const info =  await localStorageHandlerFunctions.getInformationAboutCountry(countryName, requiredInformation);\r\n        this.setState({\r\n            selectedCountry: countryName,\r\n            selectedCountryInfo: info,\r\n            requiredInformation: requiredInformation\r\n        })\r\n    };\r\n\r\n    render(){\r\n\r\n        return(\r\n            <Container style={{textAlign : \"center\"}}>\r\n               <SearchForm countries= {this.state.countriesNamesList} informationTypeList= {this.state.informationTypeList} getInformation = {this.getInformation} />\r\n               <CountryInfoContainer selectedCountry={this.state.selectedCountry} selectedCountryInfo={this.state.selectedCountryInfo} requiredInformation= {this.state.requiredInformation}/>\r\n            </Container>\r\n        );\r\n    }\r\n};\r\n\r\nexport default SearchContainer;","import Grid from '@material-ui/core/Grid';\r\nimport Header from './Header';\r\nimport SearchContainer from './SearchContainer';\r\n\r\n\r\nconst App = () => {\r\n    return (\r\n        <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\">\r\n            <Header/>\r\n            <SearchContainer/>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDom from 'react-dom';\r\n\r\nimport App from './components/App';\r\n\r\nReactDom.render(<App />, document.querySelector('#root'));"],"sourceRoot":""}