[{"D:\\search&findCountries\\countries\\src\\index.js":"1","D:\\search&findCountries\\countries\\src\\components\\App.js":"2","D:\\search&findCountries\\countries\\src\\components\\SearchContainer.js":"3","D:\\search&findCountries\\countries\\src\\components\\Header.js":"4","D:\\search&findCountries\\countries\\src\\components\\SearchForm.js":"5","D:\\search&findCountries\\countries\\src\\components\\CountryInfoContainer.js":"6","D:\\search&findCountries\\countries\\src\\utils\\localStorageHandlerFunctions.js":"7","D:\\search&findCountries\\countries\\src\\utils\\const.js":"8"},{"size":162,"mtime":1606807309438,"results":"9","hashOfConfig":"10"},{"size":349,"mtime":1607196444244,"results":"11","hashOfConfig":"10"},{"size":1876,"mtime":1607196451382,"results":"12","hashOfConfig":"10"},{"size":657,"mtime":1607178555391,"results":"13","hashOfConfig":"10"},{"size":3615,"mtime":1607203451204,"results":"14","hashOfConfig":"10"},{"size":1108,"mtime":1607196482948,"results":"15","hashOfConfig":"10"},{"size":3521,"mtime":1607192360261,"results":"16","hashOfConfig":"10"},{"size":225,"mtime":1607194255281,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"rq23wt",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"20"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\search&findCountries\\countries\\src\\index.js",[],["37","38"],"D:\\search&findCountries\\countries\\src\\components\\App.js",[],"D:\\search&findCountries\\countries\\src\\components\\SearchContainer.js",[],"D:\\search&findCountries\\countries\\src\\components\\Header.js",[],"D:\\search&findCountries\\countries\\src\\components\\SearchForm.js",["39","40","41"],"import React, {Component} from 'react';\r\nimport Container from '@material-ui/core/Container';\r\nimport Box from '@material-ui/core/Box';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\r\nimport CheckBoxIcon from '@material-ui/icons/CheckBox';\r\n\r\n\r\nclass SearchForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        let selectedCountry, requestedInfo;\r\n    }\r\n\r\n    getInfoClicked(){\r\n        if(this.selectedCountry && this.requestedInfo){\r\n            this.props.getInformation(this.selectedCountry, this.requestedInfo);\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const {countries , informationTypeList} = this.props;\r\n        const icon = <CheckBoxOutlineBlankIcon fontSize=\"small\" />;\r\n        const checkedIcon = <CheckBoxIcon fontSize=\"small\" />;\r\n\r\n        return(\r\n            <Container style={{textAlign : \"center\", borderBottom: \"1px solid\"}}>\r\n                <Box my={4}>\r\n                    <Typography variant=\"h4\" style ={{fontFamily: \"cursive\",fontWeight:200}} > What do you want to know? </Typography>\r\n                </Box>\r\n                <Box my={2}>\r\n                    <Autocomplete\r\n                        options={countries}\r\n                        getOptionLabel={(option) => option.name}\r\n                        onChange={(event, newValue) => {\r\n                            this.selectedCountry = newValue.name;\r\n                          }}\r\n                        style={{ width: \"70%\", marginLeft: \"auto\", marginRight: \"auto\"}}\r\n                        renderInput={(params) => <TextField {...params} label=\" Choose the country\" required margin=\"normal\" />}\r\n                    />\r\n                </Box>\r\n                <Box my={2}>\r\n                    <Autocomplete\r\n                        multiple\r\n                        id=\"checkboxes-tags-demo\"\r\n                        options={informationTypeList}\r\n                        id=\"tags-standard\"\r\n                        getOptionLabel={(option) => option}\r\n                        onChange={(event, newValue) => {\r\n                            this.requestedInfo = newValue;\r\n                          }}\r\n                        renderOption={(option, { selected }) => (\r\n                            <React.Fragment>\r\n                            <Checkbox\r\n                                icon={icon}\r\n                                checkedIcon={checkedIcon}\r\n                                style={{ marginRight: 8 }}\r\n                                checked={selected}\r\n                            />\r\n                            {option}\r\n                            </React.Fragment>\r\n                        )}\r\n                        style={{ width: \"70%\", marginLeft: \"auto\", marginRight: \"auto\"}}\r\n                        renderInput={(params) => (\r\n                            <TextField {...params} variant=\"standard\" required label=\"What do you want to know?\"  />\r\n                        )}\r\n                    />\r\n                </Box>\r\n                <Box my={4}>\r\n                    <Button variant=\"contained\" style ={{backgroundColor : \"black\" , color: \"white\"}} onClick={() =>{ this.getInfoClicked()}}>\r\n                        GO!\r\n                    </Button>\r\n                </Box>\r\n            </Container>\r\n        );\r\n    }\r\n};\r\n\r\nexport default SearchForm;","D:\\search&findCountries\\countries\\src\\components\\CountryInfoContainer.js",["42"],"import Container from '@material-ui/core/Container';\r\nimport Box from '@material-ui/core/Box';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst CountryInfoContainer = (props) => {\r\nconst {selectedCountry , requiredInformation , selectedCountryInfo} = props;\r\n    return (\r\n        <Container style={{textAlign : \"center\"}}>\r\n                <Box my={4}>\r\n                    <Typography variant=\"h2\" > {selectedCountry} </Typography>\r\n                </Box>\r\n                    {Object.values(requiredInformation).map((info) => {\r\n                        return  <Box my={2}>\r\n                                    <Typography variant=\"h5\" color=\"primary\" key={info+selectedCountry}>{info} </Typography>\r\n                                    {info !== 'flag' ? <Typography variant=\"h5\" > {selectedCountryInfo[info]+selectedCountry} </Typography> : <img src={props.selectedCountryInfo[info]} width=\"20%\"/>}\r\n                                </Box>  \r\n                    })}                                      \r\n        </Container>\r\n        \r\n    );\r\n};\r\n\r\nexport default CountryInfoContainer;","D:\\search&findCountries\\countries\\src\\utils\\localStorageHandlerFunctions.js",[],"D:\\search&findCountries\\countries\\src\\utils\\const.js",[],{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","severity":1,"message":"48","line":16,"column":13,"nodeType":"49","messageId":"50","endLine":16,"endColumn":28},{"ruleId":"47","severity":1,"message":"51","line":16,"column":30,"nodeType":"49","messageId":"50","endLine":16,"endColumn":43},{"ruleId":"52","severity":1,"message":"53","line":51,"column":25,"nodeType":"54","endLine":51,"endColumn":43},{"ruleId":"55","severity":1,"message":"56","line":15,"column":143,"nodeType":"57","endLine":15,"endColumn":199},"no-native-reassign",["58"],"no-negated-in-lhs",["59"],"no-unused-vars","'selectedCountry' is defined but never used.","Identifier","unusedVar","'requestedInfo' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]